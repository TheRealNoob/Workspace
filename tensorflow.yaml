# stable experimental

apiVersion: apps/v1
kind: Deployment
metadata:
  name: computervision-deployment
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  selector:
    matchLabels:
      app: tensorflow-pod
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: tensorflow-pod
    spec:
      volumes:
      - name: task-pv-storage
        persistentVolumeClaim:
          claimName: computervision-pvc
      containers:
      - name: tensorflow-container
        image: website.com/tensorflow/serving:1.12.0-gpu
        volumeMounts:
        - name: task-pv-storage
          mountPath: /models
        resources:
          limits:
            memory: 32Gi
            cpu: 16000m 
            nvidia.com/gpu: 1
        env:
        - name: MODEL_NAME
          value: "controls_detection"
        securityContext:
          runAsUser: 2000
          allowPrivilegeEscalation: false
        ports:
        - containerPort: 8500
        - containerPort: 8501
  ports:
  # If there are multiple ports, then each port sub-section needs a name and a protocol (as needed)
  - port: 8501
    targetPort: 8501
    name: http
    protocol: TCP
  - port: 8500
    targetPort: 8500
    name: http
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: computervision-service
spec:
  type: LoadBalancer
  #type: NodePort
  selector:
    app: tensorflow-pod
  ports:
    - protocol: TCP
      name: grpcmodelserver
      port: 8500
      targetPort: 8500
    - protocol: TCP
      name: restapi
      port: 8501
      targetPort: 8501
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: computervision-pvc
spec:
  storageClassName: nas-thin
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
